<?phpclass CWT_Blocks {    public $url = CWT_URL;    public $dir = CWT_DIR;    public $args = [];    public function __construct() {        $defaults = [];        $defaults['plugin_name'] = 'cityweb';        $defaults['style'] = 'carousel';        $defaults['design'] = 'default';        $defaults['background_color'] = '#f9f9f9';        $defaults['accent_color'] = '#cb3a4f';        $defaults['columns'] = 2;        $defaults['body_padding'] = 16;        $defaults['image_size'] = 'thumbnail';        $defaults['testimonial_padding'] =  [            'mobile' => [                'top' => 16,                'right' => 16,                'bottom' => 16,                'left' => 16,                'unit' => 'px'            ],            'tablet' => [                'top' => 16,                'right' => 16,                'bottom' => 16,                'left' => 16,                'unit' => 'px'            ],            'desktop' => [                'top' => 13,                'right' => 16,                'bottom' => 16,                'left' => 16,                'unit' => 'px'            ],        ];        $defaults['content_text_color'] = '#707070';        $defaults['content_font_size_desktop'] = 17;        $defaults['content_font_size_tablet'] = 16;        $defaults['content_font_size_mobile'] = 15;        $defaults['content_font_unit'] = 'px';        $defaults['content_padding'] = 22;        $defaults['name_text_color'] = '#707070';        $defaults['name_font_size_desktop'] = 22;        $defaults['name_font_size_tablet'] = 18;        $defaults['name_font_size_mobile'] = 16;        $defaults['name_font_unit'] = 'px';        $defaults['name_padding'] = 22;        $defaults['title_text_color'] = '#707070';        $defaults['title_font_size_desktop'] = 22;        $defaults['title_font_size_tablet'] = 18;        $defaults['title_font_size_mobile'] = 16;        $defaults['title_font_unit'] = 'px';        $defaults['title_padding'] = 22;        $defaults['details_text_color'] = '#707070';        $defaults['details_font_size'] = 16;        $defaults['footer_padding_top'] = 16;        $defaults['footer_margin_top'] = 16;        $defaults['font_size_content'] = 14;        $defaults['nav_text_color'] = '#ffffff';        $defaults['has_title'] = true;        $defaults['has_name'] = true;        $defaults['has_image'] = true;        $defaults['has_company'] = false;        $defaults['has_email'] = false;        $defaults['has_website'] = false;        $this->args['defaults'] = $defaults;        add_action('init', [$this, 'register_blocks']);        add_action('init', [$this, 'register_post_meta']);        add_action('init', [$this, 'slug_post_type_template']);        add_action('enqueue_block_editor_assets', [$this, 'testimonial_options']);        //add_action('block_categories', [$this, 'plugin_block_categories' ], 10, 2);        add_shortcode( 'cwt-testimonials', [$this, 'shortcode_testimonials'] );        add_action('wp_enqueue_scripts', [$this, 'enqueue_scripts']);        add_action('wp_enqueue_scripts', [$this, 'enqueue_block_styles']);    }    public function register_blocks() {        wp_register_script(            'cwt-testimonial-editor-script',            $this->dir . 'dist/editor.js',            [                'wp-blob',                'wp-blocks',                'wp-block-editor',                'wp-compose',                'wp-components',                'wp-data',                'wp-editor',                'wp-element',                'wp-i18n',                'wp-plugins',                'wp-edit-post',                'wp-core-data',                'wp-keycodes',                'wp-is-shallow-equal'            ]        );        wp_register_script(            'cwt-testimonial-script',            $this->dir . 'dist/script.js',            ['jquery']        );        wp_register_style(            'cwt-testimonial-editor-style',            $this->dir . 'dist/editor.css',            []        );        wp_register_style(            'cwt-testimonial-style',            $this->dir . 'dist/style.css',            []        );        $this->register_block_type( 'testimonial', [            'attributes' => [                'body' => [                    'type' => 'string',                    'default' => ''                ]            ],            'render_callback' => [$this, 'render_testimonial']        ] );        $this->register_block_type( 'testimonials', [            'attributes' => [                'style' => [                    'type' => 'string',                    'default' => $this->args['defaults']['style']                ],                'design' => [                    'type' => 'string',                    'default' => $this->args['defaults']['design']                ],                'columns' => [                    'type' => 'number',                    'default' => $this->args['defaults']['columns']                ],                'backgroundColor' => [                    'type' => 'string',                    'default' => $this->args['defaults']['background_color']                ],                'accentColor' => [                    'type' => 'string',                    'default' => $this->args['defaults']['accent_color']                ],                'navTextColor' => [                    'type' => 'string',                    'default' => $this->args['defaults']['nav_text_color']                ],                'testimonialPadding' => [                    'type' => 'array',                    'default' => $this->args['defaults']['testimonial_padding']                ],                'contentTextColor' => [                    'type' => 'string',                    'default' => $this->args['defaults']['content_text_color']                ],                'contentFontSize' => [                    'type' => 'array',                    'default' => [                        'desktop' => $this->args['defaults']['content_font_size_desktop'],                        'tablet' => $this->args['defaults']['content_font_size_tablet'],                        'mobile' => $this->args['defaults']['content_font_size_mobile'],                        'unit' => $this->args['defaults']['content_font_unit']                    ]                ],                'nameTextColor' => [                    'type' => 'string',                    'default' => $this->args['defaults']['name_text_color']                ],                'nameFontSize' => [                    'type' => 'array',                    'default' => [                        'desktop' => $this->args['defaults']['name_font_size_desktop'],                        'tablet' => $this->args['defaults']['name_font_size_tablet'],                        'mobile' => $this->args['defaults']['name_font_size_mobile'],                        'unit' => $this->args['defaults']['name_font_unit']                    ]                ],                'titleTextColor' => [                    'type' => 'string',                    'default' => $this->args['defaults']['name_text_color']                ],                'titleFontSize' => [                    'type' => 'array',                    'default' => [                        'desktop' => $this->args['defaults']['title_font_size_desktop'],                        'tablet' => $this->args['defaults']['title_font_size_tablet'],                        'mobile' => $this->args['defaults']['title_font_size_mobile'],                        'unit' => $this->args['defaults']['title_font_unit']                    ]                ],                'categories' => [                    'type' => 'array',                    'default' => []                ],                'categoryPrefix' => [                    'type' => 'string',                    'default' => ''                ],//                'hasCategoryPrefix' => [//                    'type' => 'boolean',//                    'default' => $this->args['defaults']['has_category_prefix']//                ],                'hasName' => [                    'type' => 'boolean',                    'default' => $this->args['defaults']['has_name']                ],                'hasTitle' => [                    'type' => 'boolean',                    'default' => $this->args['defaults']['has_title']                ],                'hasCompany' => [                    'type' => 'boolean',                    'default' => $this->args['defaults']['has_company']                ],                'hasEmail' => [                    'type' => 'boolean',                    'default' => $this->args['defaults']['has_email']                ],                'hasWebsite' => [                    'type' => 'boolean',                    'default' => $this->args['defaults']['has_website']                ],                'hasImage' => [                    'type' => 'boolean',                    'default' => $this->args['defaults']['has_image']                ]            ],            'render_callback' => [$this, 'render_testimonials']        ] );    }    public function register_post_meta() {        register_post_meta( 'cwt_testimonial', '_display_name', [            'show_in_rest' => true,            'single' => true,            'type' => 'string',            'auth_callback' => function() {                return current_user_can('edit_posts');            }        ] );        register_post_meta( 'cwt_testimonial', '_title', [            'show_in_rest' => true,            'single' => true,            'type' => 'string',            'auth_callback' => function() {                return current_user_can('edit_posts');            }        ] );        register_post_meta( 'cwt_testimonial', '_company', [            'show_in_rest' => true,            'single' => true,            'type' => 'string',            'auth_callback' => function() {                return current_user_can('edit_posts');            }        ] );        register_post_meta( 'cwt_testimonial', '_email', [            'show_in_rest' => true,            'single' => true,            'type' => 'string',            'auth_callback' => function() {                return current_user_can('edit_posts');            }        ] );        register_post_meta( 'cwt_testimonial', '_website', [            'show_in_rest' => true,            'single' => true,            'type' => 'string',            'auth_callback' => function() {                return current_user_can('edit_posts');            }        ] );    }    public function slug_post_type_template() {        $page_type_object = get_post_type_object( 'cwt_testimonial' );        $page_type_object->template = [            ['cwt-blocks/testimonial']        ];        $page_type_object->template_lock = 'all';    }    public function enqueue_scripts() {        wp_register_script('owl-carousel',            $this->dir .'assets/js/owl.carousel.min.js',   //            array ('jquery'), //depends on these, however, they are registered by core already, so no need to enqueue them.            false, false);        wp_enqueue_script('owl-carousel');    }    public function enqueue_block_styles() {        if(isset($this->args['atts'])) {            $block_style = $this->args['atts']['design'] ? $this->args['atts']['design'] : 'default';            $handle = $block_style . '-style';            wp_register_style( $handle, $this->dir .'assets/css/block-'.$block_style.'.css');        }    }    public function testimonial_options() {        wp_enqueue_script(            'cwt-testimonial-options',            $this->dir . 'dist/options.js',            [ 'wp-edit-post' ],            false,            false        );    }    public function register_block_type( $block, $options = [] ) {        register_block_type(            'cwt-blocks/' . $block,            array_merge([                'editor_script' => 'cwt-testimonial-editor-script',                'editor_style' => 'cwt-testimonial-editor-style',                'script' => 'cwt-testimonial-script',                'style' => 'cwt-testimonial-style'            ], $options)        );    }    public function plugin_block_categories( $categories ) {        return array_merge(            $categories,            [                [                    'slug'  => 'cwt-blocks',                    'title' => __( 'Cityweb Blocks', 'cityweb' ),                    'icon' => null                ],            ]        );    }    //add_filter('allowed_block_types', function($block_types, $post) {    //    $allowed = [ 'cwt-block/testimonial-block' ];    //    if ($post->post_type === 'cwt_testimonial') {    //        return $allowed;    //    }    //    return $block_types;    //}, 10, 2);    public function render_testimonial( $attributes, $content = '' ) {        $content = $attributes['body'] ? $attributes['body'] : '';        return $content;    }    public function render_testimonials( $attributes, $content = '' ) {        $this->args['atts'] = [            'blockID' => $attributes['blockID'],            'categories' => $attributes['categories'],            'style' => $attributes['style'],            'design' => $attributes['design'],            'columns' => 2,            'background_color' => $attributes['backgroundColor'],            'accent_color' => $attributes['accentColor'],            'testimonial_padding_desktop' =>                $attributes['testimonialPadding']['desktop']['top'] . $attributes['testimonialPadding']['desktop']['unit'] . ' '                . $attributes['testimonialPadding']['desktop']['right'] . $attributes['testimonialPadding']['desktop']['unit'] . ' '                . $attributes['testimonialPadding']['desktop']['bottom'] . $attributes['testimonialPadding']['desktop']['unit'] . ' '                . $attributes['testimonialPadding']['desktop']['left'] . $attributes['testimonialPadding']['desktop']['unit'],            'testimonial_padding_tablet' =>                $attributes['testimonialPadding']['tablet']['top'] . $attributes['testimonialPadding']['tablet']['unit'] . ' '                . $attributes['testimonialPadding']['tablet']['right'] . $attributes['testimonialPadding']['tablet']['unit'] . ' '                . $attributes['testimonialPadding']['tablet']['bottom'] . $attributes['testimonialPadding']['tablet']['unit'] . ' '                . $attributes['testimonialPadding']['tablet']['left'] . $attributes['testimonialPadding']['tablet']['unit'],            'testimonial_padding_mobile' =>                $attributes['testimonialPadding']['mobile']['top'] . $attributes['testimonialPadding']['mobile']['unit'] . ' '                . $attributes['testimonialPadding']['mobile']['right'] . $attributes['testimonialPadding']['mobile']['unit'] . ' '                . $attributes['testimonialPadding']['mobile']['bottom'] . $attributes['testimonialPadding']['mobile']['unit'] . ' '                . $attributes['testimonialPadding']['mobile']['left'] . $attributes['testimonialPadding']['mobile']['unit'],            'content_text_color' => $attributes['contentTextColor'],            'content_font_size_desktop' => $attributes['contentFontSize']['desktop'],            'content_font_size_tablet' => $attributes['contentFontSize']['tablet'],            'content_font_size_mobile' => $attributes['contentFontSize']['mobile'],            'content_font_unit' => $attributes['contentFontSize']['unit'],            'content_padding' => $attributes['contentPadding'],            'name_text_color' => $attributes['nameTextColor'],            'name_font_size_desktop' => $attributes['nameFontSize']['desktop'],            'name_font_size_tablet' => $attributes['nameFontSize']['tablet'],            'name_font_size_mobile' => $attributes['nameFontSize']['mobile'],            'name_font_unit' => $attributes['nameFontSize']['unit'],            'name_padding' => $attributes['namePadding'],            'title_text_color' => $attributes['titleTextColor'],            'title_font_size_desktop' => $attributes['titleFontSize']['desktop'],            'title_font_size_tablet' => $attributes['titleFontSize']['tablet'],            'title_font_size_mobile' => $attributes['titleFontSize']['mobile'],            'title_font_unit' => $attributes['titleFontSize']['unit'],            'title_padding' => $attributes['titlePadding'],            'details_text_color' => '#282828',            'details_font_size' => 16,            'nav_text_color' => $attributes['navTextColor'],            'category_prefix' => $attributes['categoryPrefix'],            'image_size' => 'thumbnail',            'body_padding' => 16,            'footer_padding_top' => 16,            'footer_margin_top' => 16,            'footer_border' => '1px solid #75757530',            'has_name' => $attributes['hasName'],            'has_category_prefix' => $attributes['hasCategoryPrefix'],            'has_title' => $attributes['hasTitle'],            'has_company' => $attributes['hasCompany'],            'has_email' => $attributes['hasEmail'],            'has_website' => $attributes['hasWebsite'],            'has_image' => $attributes['hasImage'],        ];        ob_start();        var_dump($this->args['atts']['testimonial_padding_desktop']);        // Generate styles        $this->enqueue_block_styles();        $this->block_style();        if( method_exists('CWT_Blocks', 'style_' . $this->args['atts']['style'] ) ) {            $this->{'style_' . $this->args['atts']['style']}();        } else {            $this->style_carousel();        }        wp_reset_postdata();        return ob_get_clean();    }    public function get_query_args($categories) {        if($categories) {            $args = [                'post_type' => 'cwt_testimonial',                'posts_per_page'   => -1,//                'orderby'   => 'rand',                'tax_query' => array(                    array(                        'taxonomy' => 'cwt_testimonial_category',                        'field' => 'slug', //can be set to ID                        'terms' => $categories //if field is ID you can reference by cat/term number                    )                )            ];        } else {            $args = [                'post_type' => 'cwt_testimonial',                'orderby'   => 'ASC',                'posts_per_page'   => -1,            ];        }        return $args;    }    public function style_carousel() {        $args = $this->get_query_args($this->args['atts']['categories']);        $the_query = new WP_Query( $args );        $style =  $this->args['atts']['style'] ? $this->args['atts']['style'] : 'default';        $design =  $this->args['atts']['design'] ? $this->args['atts']['design'] : 'default';        if ( $the_query->have_posts() ) : ?>            <div class="wp-block block-<?php echo $this->args['atts']['blockID']; ?> cwt-testimonials cwt-<?php echo $style ?> cwt-<?php echo $design ?> owl-carousel">                <?php                while ( $the_query->have_posts() ) : $the_query->the_post();                    $meta = get_post_meta(get_the_ID());//                    $cats = $this->get_cpt_categories(get_the_ID());                    $this->args['loop_fields'] = [                        'time' => $meta['_transformation_time'][0] ?? null,                        'display_name' => $meta['_display_name'][0] ?? null,                        'title' => $meta['_title'][0] ?? null,                        'email' => $meta['_email'][0] ?? null,                        'company' => $meta['_company'][0] ?? null,                        'website' => $meta['_website'][0] ?? null,                        'category' => ''                    ];                    if( method_exists('CWT_Blocks', 'design_' . $this->args['atts']['design'] ) ) {                        $this->{'design_' . $this->args['atts']['design']}();                    } else {                        $this->design_default();                    }                endwhile;                ?>            </div>            <script>                // Check this options to set autoheight with JS and includde animation                // https://stackoverflow.com/questions/29769409/owl-carousel-2-autoheight-multiple-items                jQuery.noConflict();                jQuery( document ).ready(function() {                    var carousel = jQuery(".owl-carousel");                    carousel.owlCarousel({                        items: 1,                        loop: true,                        nav: true,                        dots: true,                        lazyLoad: true                    });                });            </script>        <?php else :            printf('<div class="testimonials--not-found"><p>%s</p></div>', 'Please add testimonial or remove this module from the page');        endif;    }    public function style_list() {        $args = $this->get_query_args($this->args['atts']['categories']);        $the_query = new WP_Query( $args );        $design =  $this->args['atts']['design'] ? $this->args['atts']['design'] : 'default';        $style =  $this->args['atts']['style'] ? $this->args['atts']['style'] : 'default';        $columns = $this->args['atts']['columns'];        if ( $the_query->have_posts() ) : $count = 0; ?>            <div class="wp-block block-<?php echo $this->args['atts']['blockID']; ?> cwt-testimonials cwt-<?php echo $style ?> cwt-<?php echo $design ?>">                <?php echo ($columns > 1) ? '<div class="cwt-row">' : ''; ?>                    <?php while ( $the_query->have_posts() ) : $the_query->the_post();                        $count++;                        $meta = get_post_meta(get_the_ID());//                        $cats = $this->get_cpt_categories(get_the_ID());                        $this->args['loop_fields'] = [                            'time' => $meta['_transformation_time'][0] ?? null,                            'display_name' => $meta['_display_name'][0] ?? null,                            'title' => $meta['_title'][0] ?? null,                            'email' => $meta['_email'][0] ?? null,                            'company' => $meta['_company'][0] ?? null,                            'website' => $meta['_website'][0] ?? null,                            'category' => ''                        ];                        if( method_exists('CWT_Blocks', 'design_' . $this->args['atts']['design'] ) ) {                            $this->{'design_' . $this->args['atts']['design']}();                        } else {                            $this->design_default();                        }                        echo ($columns > 1 && $count % $columns == 0) ? '</div><div class="cwt-row">' : '';                    endwhile;                    ?>                <?php echo ($columns > 1) ? '</div>' : ''; ?>            </div>        <?php else :            printf('<div class="testimonials--not-found"><p>%s</p></div>', 'Please add testimonial or remove this module from the page');        endif;    }    public function design_default() {        ?>        <div class="cwt-testimonial" >            <?php edit_post_link( __( '', 'cityweb' ), '<div class="cwt-testimonial__edit">', '</div>' ); ?>            <div class="cwt-testimonial__body-wrapper">                <blockquote class="cwt-testimonial__body">                    <div class="cwt-testimonial__content-wrapper">                        <header class="cwt-testimonial__header">                            <?php                                $this->testimonial_image(                                    $this->args['atts']['has_image'],                                    $this->args['atts']['image_size']                                );                            ?>                        </header>                        <div class="cwt-testimonial__content">                            <?php the_content(); ?>                        </div>                        <footer class="cwt-testimonial__footer">                            <div class="cwt-testimonial__meta">                                <?php $this->testimonial_name($this->args['atts']['has_name'], $this->args['loop_fields']['display_name'], get_the_title()); ?>                                <?php $this->testimonial_title($this->args['atts']['has_title'], $this->args['loop_fields']['title']); ?>                                <?php $this->testimonial_company($this->args['atts']['has_company'], $this->args['loop_fields']['company']); ?>                                <?php $this->testimonial_email($this->args['atts']['has_email'], $this->args['loop_fields']['email']); ?>                                <?php $this->testimonial_website($this->args['atts']['has_website'], $this->args['loop_fields']['website']); ?>                            </div>                        </footer>                    </div>                </blockquote>            </div>        </div>        <?php    }    public function design_border() {        ?>        <div class="cwt-testimonial">            <?php edit_post_link( __( '', 'cityweb' ), '<div class="cwt-testimonial__edit">', '</div>' ); ?>            <blockquote class="cwt-testimonial__body">                <div class="cwt-testimonial__content-wrapper">                    <div class="cwt-testimonial__content">                        <?php the_content(); ?>                    </div>                    <footer class="cwt-testimonial__footer">                        <?php $this->testimonial_image(                            $this->args['atts']['has_image'],                            $this->args['atts']['image_size']                        ); ?>                        <div class="cwt-testimonial__meta">                            <?php $this->testimonial_name($this->args['atts']['has_name'], $this->args['loop_fields']['display_name'], get_the_title()); ?>                            <?php $this->testimonial_title($this->args['atts']['has_title'], $this->args['loop_fields']['title']); ?>                            <?php $this->testimonial_company($this->args['atts']['has_company'], $this->args['loop_fields']['company']); ?>                            <?php $this->testimonial_email($this->args['atts']['has_email'], $this->args['loop_fields']['email']); ?>                            <?php $this->testimonial_website($this->args['atts']['has_website'], $this->args['loop_fields']['website']); ?>                        </div>                    </footer>                </div>                <div class="cwt-testimonial__floating-border"></div>            </blockquote>        </div>        <?php    }    public function design_simple() {        ?>        <div class="cwt-testimonial">            <div class="cwt-testimonial__body">                    <blockquote class="cwt-testimonial__content">                        <?php the_content(); ?>                        <footer class="cwt-testimonial__footer">                            <div class="cwt-testimonial__meta">                                <?php $this->testimonial_name($this->args['atts']['has_name'], $this->args['loop_fields']['display_name'], get_the_title()); ?>                                <?php $this->testimonial_title($this->args['atts']['has_title'], $this->args['loop_fields']['title']); ?>                                <?php $this->testimonial_company($this->args['atts']['has_company'], $this->args['loop_fields']['company']); ?>                                <?php $this->testimonial_email($this->args['atts']['has_email'], $this->args['loop_fields']['email']); ?>                                <?php $this->testimonial_website($this->args['atts']['has_website'], $this->args['loop_fields']['website']); ?>                            </div>                        </footer>                    </blockquote>                    <?php                    $this->testimonial_image(                        $this->args['atts']['has_image'],                        $this->args['atts']['image_size']                    );                    ?>        </div>        </div>        <?php    }    // todo: check if block is active on the page and add carousel styles    // todo: add carousel styles only once    // todo: Merge custom style and template styles in to onw if possible    public function block_style() {        $block = '.block-' . $this->args['atts']['blockID'];        $tablet = '768px';        $desktop = '1200px';        $custom_css = '';        $custom_css .= $block . ' .cwt-testimonial {';            if( isset($this->args['atts']['columns'])                && $this->args['atts']['style'] === 'list' ) {                $col = '100%';                switch ($this->args['atts']['columns']) {                    case 2:                        $col = '50%';                        break;                    case 3:                        $col = '33.333333%';                        break;                    case 4:                        $col = '25%';                        break;                }                $custom_css .= 'width: ' . $col . ';';            }        $custom_css .= '}';        var_dump($this->args['atts']['testimonial_padding_desktop']);        $custom_css .= $block . ' .cwt-testimonial__content-wrapper {';            $custom_css .= 'background-color: ' . $this->args['atts']['background_color'] . ';';            $custom_css .= 'padding: ' . $this->args['atts']['testimonial_padding_desktop'] . ';';        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__body {';            $custom_css .= 'background-color: ' . $this->args['atts']['background_color'] . ';';        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__content:before,';        $custom_css .= $block . ' .cwt-testimonial__content:after {';            $custom_css .= 'background-color: ' . $this->args['atts']['accent_color'] . ';';        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__floating-border {';            if(isset($this->args['atts']['floating_border'])) {                $custom_css .= 'border: ' . $this->args['atts']['floating_border'] . ';';            }        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__content {';            $custom_css .= 'font-size: ' . $this->args['atts']['content_font_size_mobile'] . 'px;';            $custom_css .= 'color: ' . $this->args['atts']['content_text_color'] . ';';        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__name {';            $custom_css .= 'font-size: ' . $this->args['atts']['name_font_size_mobile'] . 'px;';            $custom_css .= 'color: ' . $this->args['atts']['name_text_color'] . ';';        $custom_css .= '}';        $custom_css .= '@media all and (min-width: '.$tablet.') {';            $custom_css .= $block . ' .cwt-testimonial__content {';                $custom_css .= 'font-size: ' . $this->args['atts']['content_font_size_tablet'] . 'px;';            $custom_css .= '}';            $custom_css .= $block . ' .cwt-testimonial__name {';                $custom_css .= 'font-size: ' . $this->args['atts']['name_font_size_tablet'] . 'px;';            $custom_css .= '}';        $custom_css .= '}';        $custom_css .= '@media all and (min-width: '.$desktop.') {';            $custom_css .= $block . ' .cwt-testimonial__content {';                $custom_css .= 'font-size: ' . $this->args['atts']['content_font_size_desktop'] . 'px;';            $custom_css .= '}';            $custom_css .= $block . ' .cwt-testimonial__name {';                $custom_css .= 'font-size: ' . $this->args['atts']['name_font_size_desktop'] . 'px;';            $custom_css .= '}';        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__title {';            $custom_css .= 'font-size: ' . $this->args['atts']['title_font_size'] . 'px;';            $custom_css .= 'color: ' . $this->args['atts']['title_text_color'] . ';';        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__details {';            $custom_css .= 'font-size: ' . $this->args['atts']['details_font_size'] . 'px;';            $custom_css .= 'color: ' . $this->args['atts']['details_text_color'] . ';';        $custom_css .= '}';        $custom_css .= $block . ' .cwt-testimonial__footer {';            $custom_css .= 'padding-top: ' . $this->args['atts']['footer_padding_top'] . 'px;';            $custom_css .= 'margin-top: ' . $this->args['atts']['footer_margin_top'] . 'px;';            $custom_css .= 'border-top: ' . $this->args['atts']['footer_border'] . ';';        $custom_css .= '}';        $custom_css .= $block . '.owl-carousel .owl-nav [class*="owl-"] {';            $custom_css .= 'background-color: ' . $this->args['atts']['accent_color'] . ';';            $custom_css .= 'color: ' . $this->args['atts']['nav_text_color'] . ';';        $custom_css .= '}';        $custom_css .= $block . '.owl-carousel .owl-nav [class*="owl-"]:hover {';            $custom_css .= 'background-color: ' . $this->args['atts']['accent_color'] . ';';            $custom_css .= 'color: ' . $this->args['atts']['nav_text_color'] . ';';            $custom_css .= 'opacity: 0.8;';        $custom_css .= '}';        $custom_css .= $block . '.owl-carousel .owl-dots .owl-dot.active span,';        $custom_css .= $block . '.owl-carousel .owl-dots .owl-dot:hover span {';            $custom_css .= 'background: ' . $this->args['atts']['accent_color'] . ';';        $custom_css .= '}';        if(isset($this->args['atts'])) {            $testimonials_style_template = $this->args['atts']['design'] ? $this->args['atts']['design'] : 'default';            $handle = $testimonials_style_template;            wp_register_style( $handle, $this->dir .'assets/css/block-'.$testimonials_style_template.'.css');            wp_enqueue_style( $handle );            wp_add_inline_style( $handle, $custom_css );        }    }    public function testimonial_name($has_name, $name, $default) {        $display_name = $name !== '' ? $name : $default;        if ($has_name) {            return printf( '<span class="cwt-testimonial__name">%s</span>', $display_name );        }    }    public function testimonial_title($has_title, $title) {        if($has_title) {            return !empty($title) ? printf('<span class="cwt-testimonial__title">%s</span>', esc_html($title)) : null;        }    }    public function testimonial_company($has_company, $company) {        if($has_company) {            return !empty($company) ? printf( '<span class="cwt-testimonial__company cwt-testimonial__details">%s</span>', esc_html( $company ) ) : null;        }    }    public function testimonial_email($has_email, $email) {        if($has_email) {            return !empty($email) ? printf( '<span class="cwt-testimonial__email cwt-testimonial__details">%s</span>', esc_html( $email ) ) : null;        }    }    public function testimonial_website($has_website, $website) {        if($has_website) {            return !empty($website) ? printf( '<span class="cwt-testimonial__website cwt-testimonial__details">%s</span>', esc_html( $website ) ) : null;        }    }    public function testimonial_image($has_image, $image_size) {        if($has_image) {            $image = get_the_post_thumbnail(get_the_ID(), $image_size);            return printf('<div class="cwt-testimonial__image">%s</div>', $image);        }    }    public function testimonial_category($postID, $has_prefix, $prefix) {        $terms = get_the_terms($postID, 'cwt_testimonial_category');        $use_prefix  = $has_prefix ? $prefix : null;        if ( $terms && ! is_wp_error( $terms ) ) :            foreach($terms as $term) {                $url = get_term_meta($term->term_id, 'cat_url', true);                if($url !== '') {                    echo '<span>' . $use_prefix . '<a href="'.$url.'">' . $term->name . '</a></span>';                } else {                    echo '<span>' . $use_prefix . $term->name . '</span>' ;                }            }        endif;    }    // Shortcodes    public function normalize_attributes($atts) {        if ( is_array($atts) || is_object($atts) ) {            foreach ($atts as $key => $value) {                if (is_int($key)) {                    $atts[$value] = true;                    unset($atts[$key]);                }            }        }        return $atts;    }    public function shortcode_testimonials( $atts ) {        $shortcode_atts = $this->normalize_attributes($atts);        $shortcode_atts = shortcode_atts( array(            'id' => 'tstmsc',            'categories' => '',            'style' => $this->args['defaults']['default'],            'design' => $this->args['defaults']['default'],            'columns' => $this->args['defaults']['columns'],            'background_color' => $this->args['defaults']['background_color'],            'accent_color' => $this->args['defaults']['accent_color'],            'body_padding' => $this->args['defaults']['body_padding'],            'image_size' => $this->args['defaults']['image_size'],            'content_text_color' => $this->args['defaults']['content_text_color'],            'content_font_size_desktop' => $this->args['defaults']['content_font_size_desktop'],            'content_font_size_tablet' => $this->args['defaults']['content_font_size_tablet'],            'content_font_size_mobile' => $this->args['defaults']['content_font_size_mobile'],            'content_font_size_unit' => $this->args['defaults']['content_font_size_mobile'],            'content_padding' => $this->args['defaults']['content_padding'],            'name_text_color' => $this->args['defaults']['name_text_color'],            'name_font_size_desktop' => $this->args['defaults']['name_font_size_desktop'],            'name_font_size_tablet' => $this->args['defaults']['name_font_size_tablet'],            'name_font_size_mobile' => $this->args['defaults']['name_font_size_mobile'],            'name_font_size_unit' => $this->args['defaults']['name_font_size_mobile'],            'name_padding' => $this->args['defaults']['name_padding'],            'title_text_color' => $this->args['defaults']['title_text_color'],            'title_font_size_desktop' => $this->args['defaults']['title_font_size_desktop'],            'title_font_size_tablet' => $this->args['defaults']['title_font_size_tablet'],            'title_font_size_mobile' => $this->args['defaults']['title_font_size_mobile'],            'title_font_size_unit' => $this->args['defaults']['title_font_size_mobile'],            'title_padding' => $this->args['defaults']['title_padding'],            'details_text_color' => $this->args['defaults']['details_text_color'],            'details_font_size' => $this->args['defaults']['details_font_size'],            'footer_padding_top' => $this->args['defaults']['footer_padding_top'],            'footer_margin_top' => $this->args['defaults']['footer_margin_top'],            'font_size_content' => $this->args['defaults']['font_size_content'],            'nav_text_color' => $this->args['defaults']['nav_text_color'],            'show_title' => $this->args['defaults']['has_title'],            'show_name' => $this->args['defaults']['has_name'],            'show_image' => $this->args['defaults']['has_image'],            'show_company' => $this->args['defaults']['has_company'],            'show_email' => $this->args['defaults']['has_email'],            'show_website' => $this->args['defaults']['has_website'],        ), $shortcode_atts, 'cwt-testimonials' );        $id = preg_replace('/[^A-Za-z0-9\-]/', '', $shortcode_atts['id']);        // Allow only up to 4 columns        $columns = $shortcode_atts['columns'];        $columns = $columns <= 0 || $columns > 4 ? 1 : $columns;        $footer_border = '1px solid ' . $shortcode_atts['accent_color'] . '30';        $floating_border = '4px solid ' . $shortcode_atts['accent_color'];        $this->args['atts'] = [            'blockID' => $id,            'categories' => $shortcode_atts['categories'],            'style' => $shortcode_atts['style'],            'design' => $shortcode_atts['design'],            'columns' => $shortcode_atts['columns'],            'background_color' => $shortcode_atts['background_color'],            'accent_color' => $shortcode_atts['accent_color'],            'body_padding' => $shortcode_atts['body_padding'],            'image_size' => $shortcode_atts['image_size'],            'content_text_color' => $shortcode_atts['content_text_color'],            'content_font_size_desktop' => $shortcode_atts['content_font_size_desktop'],            'content_font_size_tablet' => $shortcode_atts['content_font_size_tablet'],            'content_font_size_mobile' => $shortcode_atts['content_font_size_mobile'],            'content_font_unit' => $shortcode_atts['content_font_unit'],            'content_padding' => $shortcode_atts['content_padding'],            'name_text_color' => $shortcode_atts['name_text_color'],            'name_font_size_desktop' => $shortcode_atts['name_font_size_desktop'],            'name_font_size_tablet' => $shortcode_atts['name_font_size_tablet'],            'name_font_size_mobile' => $shortcode_atts['name_font_size_mobile'],            'name_font_unit' => $shortcode_atts['name_font_unit'],            'name_padding' => $shortcode_atts['name_padding'],            'title_text_color' => $shortcode_atts['title_text_color'],            'title_font_size_desktop' => $shortcode_atts['title_font_size_desktop'],            'title_font_size_tablet' => $shortcode_atts['title_font_size_tablet'],            'title_font_size_mobile' => $shortcode_atts['title_font_size_mobile'],            'title_font_unit' => $shortcode_atts['title_font_unit'],            'title_padding' => $shortcode_atts['title_padding'],            'details_text_color' => $shortcode_atts['details_text_color'],            'details_font_size' => $shortcode_atts['details_font_size'],            'floating_border' => $floating_border,            'footer_border' => $footer_border,            'footer_padding_top' => $shortcode_atts['footer_padding_top'],            'footer_margin_top' => $shortcode_atts['footer_margin_top'],            'nav_text_color' => $shortcode_atts['nav_text_color'],            'has_image' => $shortcode_atts['show_image'],            'has_name' => $shortcode_atts['show_name'],            'has_title' => $shortcode_atts['show_title'],            'has_company' => $shortcode_atts['show_company'],            'has_email' => $shortcode_atts['show_email'],            'has_website' => $shortcode_atts['show_website'],        ];        ob_start();        // Generate styles        $this->enqueue_block_styles();        $this->block_style();        if( method_exists('CWT_Blocks', 'style_' . $this->args['atts']['style'] ) ) {            $this->{'style_' . $this->args['atts']['style']}();        } else {            $this->style_carousel();        }        wp_reset_postdata();        return ob_get_clean();    }}